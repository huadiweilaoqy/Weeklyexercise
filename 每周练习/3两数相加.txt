给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    struct ListNode *l3head,*l3,*p;
    int n=0;
    l3head=(struct ListNode *)malloc(sizeof(struct ListNode));
    l3=l3head;
    n=l1->val+l2->val;
    l3->val=n%10;
    n=n/10;
    l1=l1->next;
    l2=l2->next;
    while(l1!=NULL&&l2!=NULL){
        p=(struct ListNode *)malloc(sizeof(struct ListNode));
        n=l1->val+l2->val+n;
        p->val=n%10;
        n=n/10;
        l3->next=p;
        l3=p;
        l1=l1->next;
        l2=l2->next;
    }
    if(l1!=NULL){
        while(l1!=NULL){
            p=(struct ListNode *)malloc(sizeof(struct ListNode));
            p->val=l1->val;
            if(n!=0){
                p->val+=n;
            }
            n=p->val;
            p->val=n%10;
            n/=10;
            l1=l1->next;
            l3->next=p;
            l3=p;
        }
    }else if(l2!=NULL){
        while(l2!=NULL){
            p=(struct ListNode *)malloc(sizeof(struct ListNode));
            p->val=l2->val;
            if(n!=0){
                p->val+=n;
            }
            n=p->val;
            p->val=n%10;
            n/=10;
            l2=l2->next;
            l3->next=p;
            l3=p;
        }
    }
    if(n>0){
        p=(struct ListNode *)malloc(sizeof(struct ListNode));
        p->val=n;
        l3->next=p;
        l3=p;
    }
    l3->next=NULL;
    return l3head;
}